package com.networknt.eventuate.todolist;

import com.networknt.eventuate.common.AggregateRepository;
import com.networknt.eventuate.common.EntityWithIdAndVersion;
import com.networknt.eventuate.common.EventuateAggregateStore;

import com.networknt.eventuate.common.impl.sync.AggregateCrud;
import com.networknt.eventuate.jdbc.EventuateLocalAggregateStore;
import com.networknt.eventuate.todolist.common.model.TodoInfo;

import com.networknt.eventuate.todolist.domain.TodoAggregate;
import com.networknt.eventuate.todolist.domain.TodoBulkDeleteAggregate;
import com.networknt.service.SingletonServiceFactory;

import org.h2.tools.RunScript;
import org.junit.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sql.DataSource;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
* Generated by swagger-codegen
*/
public class TodoTest {

    static final Logger logger = LoggerFactory.getLogger(TodoTest.class);

    public static DataSource ds;

    static {
        ds = (DataSource) SingletonServiceFactory.getBean(DataSource.class);
        try (Connection connection = ds.getConnection()) {
            // Runscript doesn't work need to execute batch here.
            String schemaResourceName = "/embedded-event-store-schema.sql";
            InputStream in = TodoTest.class.getResourceAsStream(schemaResourceName);

            if (in == null) {
                throw new RuntimeException("Failed to load resource: " + schemaResourceName);
            }
            InputStreamReader reader = new InputStreamReader(in);
            RunScript.execute(connection, reader);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    private EventuateAggregateStore eventStore  = (EventuateAggregateStore)SingletonServiceFactory.getBean(EventuateAggregateStore.class);

    private AggregateRepository todoRepository = new AggregateRepository(TodoAggregate.class, eventStore);
    private AggregateRepository bulkDeleteAggregateRepository  = new AggregateRepository(TodoBulkDeleteAggregate.class, eventStore);

    private TodoCommandService  service = new TodoCommandServiceImpl(todoRepository, bulkDeleteAggregateRepository);

    @Test
    public void testAddTodo() throws Exception {

        TodoInfo todo = new TodoInfo();
        todo.setTitle(" this is the first todo");
        CompletableFuture<TodoInfo> result = service.add(todo).thenApply((e) -> {
            TodoInfo m = e.getAggregate().getTodo();
            System.out.println("m = " + m);
            System.out.println("m = " + e.getEntityId());
            return m;
        });

        System.out.println("result = " + result.get());
    }

    @Test
    public void testUpdateTodo() throws Exception {

        TodoInfo todo = new TodoInfo();
        todo.setTitle(" this is the new todo");

        CompletableFuture<String > id  = service.add(todo).thenApply((e) -> {
            String m =  e.getEntityId();
            return m;
        });

        todo.setCompleted(true);
        CompletableFuture<TodoInfo> result = service.update(id.get(), todo).thenApply((e) -> {
            TodoInfo m = e.getAggregate().getTodo();
            System.out.println("m = " + m);
            System.out.println("m = " + e.getEntityId());
            return m;
        });

        System.out.println("result = " + result.get());
    }
}
